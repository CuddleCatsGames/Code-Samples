## Screen with Stats Button
screen gameUI:
    imagebutton:
        xalign 1.0
        yalign 0.0
        xoffset -30
        yoffset 30
        idle "UI/mc_idle.png"
        hover "UI/mc_hover.png"
        action ShowMenu("StatsUI")

## Stats UI
screen StatsUI:
    tag character_screen_tag
    add "UI/bg peach.png"
    hbox:
        ## LEFT FRAME
        frame:
            ysize 1080
            xsize 340
            xalign 0.30
            yalign 0.72
            xpadding 30
            ypadding 30
            #Remove hashtag in the next lineto remove the black and blue background
            # background None
            hbox:
                xalign 0.5
                yalign 0.11
                spacing 40

                text "{b}Lover Stats{/b}" size 50

            vbox:
                xalign 0.5
                yalign 0.6
                label _("Friendship")
                text ("%d points" %lover_friendship)
                bar value lover_friendship range 100

            vbox:
                xalign 0.5
                yalign 0.8
                label _("Love")
                text ("%d points" %lover_love)
                bar value lover_love range 100

            hbox:
                xalign 0.5
                yalign 0.3
                spacing 40
                # Text Column
                vbox:
                    spacing 10
                    text "Corruption" size 40
                    text "Trust" size 40
                    text "Innocence" size 40

                # Values Column
                vbox:
                    spacing 10
                    text "[mccorruption]" size 40
                    text "[mctrust]" size 40
                    text "[mcinnocence]" size 40


        ## RIGHT FRAME
        frame:
            background None
            ysize 1080
            xsize 1280
            vbox:
                xalign 0.7
                xsize 800
                xoffset -300
                yoffset 100
                spacing 20
                ## Notice that we're using selectedCharacter to show the variables here.
                text "Name: [lover.name] Dupont"
                text "Age: [lover.age]"
                text "Occupation: [lover.occupation]"
                text "Birthday: [lover.birthday]"
                text "Favorite Food: [lover.food]"
                text "Favorite Flower: [lover.flower]"
                text "Hobby: [lover.hobby]"
                text "Dream: [lover.dream]"
                text "Dream Destination: [lover.destination]"
                text "Backstory: [lover.backstory]"

            add lover.imageName xalign 1.5 yalign -5.0

            imagebutton:
                xalign 1.25
                yalign 0.0
                xoffset -30
                yoffset 30
                auto "UI/return_%s.png"
                action Return()


screen myStats:
    imagebutton:
        xalign 1.0
        yalign 0.1
        xoffset -30
        yoffset 0
        auto "UI/claude_%s.png"
        action ShowMenu("My_Stats")

#####Charscreen
screen My_Stats():
    tag character_screen_tag
    add "UI/bg peach.png"
    hbox:
        ## LEFT FRAME
        frame:
            ysize 1080
            xsize 340
            xalign 0.30
            yalign 0.72
            xpadding 30
            ypadding 30
            #Remove hashtag in the next lineto remove the black and blue background
            # background None
            hbox:
                xalign 0.5
                yalign 0.11
                spacing 40

                text "{b}My Stats{/b}" size 50

            vbox:
                xalign 0.5
                yalign 0.6
                label _("Obsession")
                text ("%d points" %obsession)
                bar value obsession range 100

            vbox:
                xalign 0.5
                yalign 0.8
                label _("Hedonism")
                text ("%d points" %hedonism)
                bar value hedonism range 100

            hbox:
                xalign 0.5
                yalign 0.3
                spacing 40
                # Text Column
                vbox:
                    spacing 10
                    text "Morality" size 40
                    text "Charm" size 40
                    text "Intelligence" size 40
                    text "Authority" size 40

                # Values Column
                vbox:
                    spacing 10
                    text "[morality]" size 40
                    text "[charm]" size 40
                    text "[intelligence]" size 40
                    text "[authority]" size 40


        ## RIGHT FRAME
        frame:
            background None
            ysize 1080
            xsize 1280
            vbox:
                xalign 0.7
                xsize 800
                xoffset -300
                yoffset 100
                spacing 20
                ## Notice that we're using selectedCharacter to show the variables here.
                text "Name: [claude.name]"
                text "Age: [claude.age]"
                text "Occupation: [claude.occupation]"
                text "Personality: [claude.personality]"
                text "Backstory: [claude.backstory]"

            add claude.imageName xalign 2.0 yalign -0.3

            imagebutton:
                xalign 1.25
                yalign 0.0
                xoffset -30
                yoffset 30
                auto "UI/return_%s.png"
                action Return()

style character_button_text:
    xalign 0.5


## Screen with Stats Button
screen mainmapUI:
    imagebutton:
        xalign 0.05
        yalign 0.0
        xoffset -30
        yoffset 30
        auto "UI/map_%s.png"
        action ShowMenu("MapUI")
        # You may also use the code below depending on your needs.
        # action ShowMenu("mapUI")
        # This was the same code used in the vlog.

# If you just want to show a map that does nothing more than just an indicator, it's good to use ShowMenu.
# If you want to navigate using the map, it's prefered to use "call".
# When in skip mode (tab key on keyboard), this prevents the game to be skipped

screen MapUI:
    add "map/map.png"

    imagebutton:
        xpos 422
        ypos 222
        idle "map/manor_idle.png"
        hover "map/manor_hover.png"
        action Jump("manor_pressed")

    imagebutton:
        xalign 1.0
        yalign 0.0
        xoffset -30
        yoffset 30
        auto "UI/return_%s.png"
        action Return()


screen workUI:
    imagebutton:
        xalign 1.0
        yalign 0.14
        xoffset -30
        yoffset 30
        idle "UI/work_idle.png"
        hover "UI/work_hover.png"
        action ShowMenu("book_")

screen book_():
    default bookpage = 0
    zorder 1
    modal True
    frame:
        align (0.5, 0.5)
        xysize(1000, 1000)

        vbox:
            xalign 0.15
            yalign 0.25
            spacing 15

            if bookpage == 0:
                text "{b}[case1.casenumber]{/b}"
                text "Case Name: [case1.casename]"
                text "Suspect: [case1.suspect]"
                text "Victim:[case1.victim]"
                text "Evidence 1: [case1.evidence1]"
                text "Evidence 2: [case1.evidence2]"
                text "Evidence 3: [case1.evidence3]"
                text "Witness 1: [case1.witness1]"
                text "Witness 2: [case1.witness2]"
            elif bookpage == 1:
                xalign 0.5
                text "Information: [case1.info1]"
                text "More: [case1.info2]"
                text "More: [case1.info3]"
            elif bookpage == 2:
                text "{b}[case2.casenumber]{/b}"
                text "Case to be filed"
            elif bookpage == 3:
                text "Case to be filed"
            elif bookpage == 4:
                text "{b}[case3.casenumber]{/b}"
                text "Case to be filed"
            elif bookpage == 5:
                text "Case to be filed"
            elif bookpage == 6:
                text "{b}[case4.casenumber]{/b}"
                text "Case to be filed"
            elif bookpage == 7:
                text "Case to be filed"
            elif bookpage == 8:
                text "{b}[case5.casenumber]{/b}"
                text "Case to be filed"
            elif bookpage == 9:
                text "Case to be filed"
            elif bookpage == 10:
                text "Case to be filed"
            else:
                text "Case to be filed"  # Add the content for page 3 here.
                # Add more 'elif' blocks for additional pages if needed.

    imagebutton:
        xalign 1.0
        yalign 0.0
        xoffset -30
        yoffset 30
        auto "UI/return_%s.png"
        action Return()

    hbox:
        align (0.5, 0.85)
        textbutton "Previous" action SetScreenVariable("bookpage", max(0, bookpage - 1))
        textbutton "Next" action SetScreenVariable("bookpage", min(10, bookpage + 1))

## This is a resource name loader that will import the names of files from certain folders
## Intended as a way to quickly grab file names to use in accessibility.rpy, screens.rpy, and captiontool.rpy
## Remember to add commas to the end of each listed item
## As of RenPy7, basic images do not have to be defined (LayeredImages still need to be set up)
init -1:
    $ redefine_resources = False
    ## When you add, delete or rename an image or music resource, change redefine_resources to True and launch the project


## Sprites:
#### Characters Claude images and stats####
    define c = Character("Claude", image = "claude", color="#446CCF")
    image c angryh = "side claude angryh.png"
    image c angry = "side claude angry.png"
    image c tired = "side claude tired.png"
    image define c tiredh = "side claude tiredh.png"
    image define c confused = "side claude confused.png"
    image define c confusedh = "side claude confusedh.png"
    image define c disgusted = "side claude disgusted.png"
    image define c disgustedh = "side claude disgustedh.png"
    image define c fierceh = "side claude fierceh.png"
    image define c fierce = "side claude fierce.png"
    image define c flirty = "side claude flirty.png"
    image define c flirtyh = "side claude flirtyh.png"
    image define c happy = "side claude happy.png"
    image define c happyh = "side claude happyh.png"
    image define c incredulous = "side claude incredulous.png"
    image define c increduloush = "side claude increduloush.png"
    image define c irritated = "side claude irritated.png"
    image define c irritatedh = "side claude irritatedh.png"
    image define c sad = "side claude sad.png"
    image define c sadh = "side claude sadh.png"
    image define c sarcastic = "side claude sarcastic.png"
    image define c sarcastich = "side claude sarcastich.png"
    image define c serious = "side claude serious.png"
    image define c serioush = "side claude serioush.png"
    default morality = 0
    default charm = 0
    default obsession = 0
    default intelligence = 0
    default authority = 0
    default hedonism = 0

#### Lover images and stats ####
    define mc = Character("[mcn]", image = "mc", color="#B76E79")
    image define mc happy = "side mc happy.png"
    image define mc angry = "side mc angry.png"
    image define mc confuse = "side mc confuse.png"
    image define mc fear = "side mc fear.png"
    image define mc flirty = "side mc flirty.png"
    image define mc shocked = "side mc shocked.png"
    image define mc worried = "side mc worried.png"
    image define mc fierce = "side mc fierce.png"
    image define mc sad = "side mc sad.png"
    image define mc neutral = "side mc neutral.png"
    image define mc serious = "side mc serious.png"
    image define mc worried = "side mc worried.png"
    default lover_love = 0
    default mccorruption = 0
    default mctrust = 0
    default mcinnocence = 100
    default lover_friendship = 0

##### Rival
    define r = Character("Robin", image = "robin", color="#e68c2c")
    image define r happy = "side robin happy.png"
    image define r confused = "side robin confused.png"
    image define r smile = "side robin smile.ong"

    ######### NPC #########
    define capg = Character("Captain", image = "captain",)
    image define capg normal = "side captain normal.png"
    define p = Character("Jules", image = "jules",)
    image define p normal = "side jules normal.png"
    define y = Character(name = "Scribe's Son",)
    define n = Character("Narattor",)
    define nv = Character("", kind= nvl,)
    define md = Character("Marie", image = "marie",)
    image define md normal = ("side marie normal.png")
    define kid1 = Character("Margot",)
    define ml = Character("Marquis", image = "marquis",)
    image define ml norm = "side marquis norm.png"


## Music:
# init -2 python:
    define opening = "audio/music/opening.mp3"
    define marked = "audio/music/marked.mp3"
    define intro = "audio/music/intro.mp3"
    define gregorian = "audio/music/gregorian.mp3"
    define market = "audio/music/medieval faire.mp3"
    define poj = "audio/music/Suonatore di Liuto.mp3"
    define cosette = "audio/music/cosette.mp3" #####https://www.youtube.com/watch?v=VlNG0vBK88Y&t=30s
    define obsessed = "audio/music/obsession.mp3"
    define court = "audio/music/court.mp3" #####Foreboding Whispers



#### Image fx###

    define eyeopen = ImageDissolve("fx/eyeopen.png", 1.5, 100)
    define eyeclose = ImageDissolve("fx/eyeopen.png", 1.5, 100, reverse=True)
## Music Caption:
    # Careless-Summer_Looping: _("")
    # Future-Business_v001: _("")
    # Sculpture-Garden_Looping: _("")
    # The-Concrete-Bakes_Looping: _("")

## SFX:
    define knock = "audio/sfx/knock.mp3"
    define clock = "audio/sfx/clock bell.mp3"
    define heartbeat = "audio/sfx/heartbeat.mp3"
    define gavel = Play("sound","sfx/gavel.mp3")
    # Chest-Drawer_Close = "audio/sfx/Chest-Drawer_Close.mp3"
    # Chest-Drawer_Open = "audio/sfx/Chest-Drawer_Open.mp3"
    # Edge-of-Ocean = "audio/sfx/Edge-of-Ocean.mp3"
    # Interior-Door_Close = "audio/sfx/Interior-Door_Close.mp3"

#######other defs
    define arguments_fulfilled = 0
    default trialpoints = 0

## SFX Caption:
    # Chest-Drawer_Close: _("")
    # Chest-Drawer_Open: _("")
    # Edge-of-Ocean: _("")
    # Interior-Door_Close: _("")

## Script to redefine the images:
## !!! DO NOT CHANGE THE CODE BELOW THIS POINT !!!
init -1 python:

    if redefine_resources:
        with open(renpy.loader.transfn('definitions.rpy'), 'rb') as f:
            s = f.read()
        f.closed
        pos = s.find('## Script to redefine the images')
        if pos>1:
            s=s[pos:]

        with open(renpy.loader.transfn('definitions.rpy'), 'wb') as f:
            f.write('## This is a resource name loader that will import the names of files from certain folders\n## Intended as a way to quickly grab file names to use in accessibility.rpy, screens.rpy, and captiontool.rpy\n## Remember to add commas to the end of each listed item\n## As of RenPy7, basic images do not have to be defined (LayeredImages still need to be set up)\r\ninit -1:\r\n    $ redefine_resources = False\n    ## When you add, delete or rename an image or music resource, change redefine_resources to True and launch the project\r\n\r\n')

            f.write('## Sprites:\r\n')
            for file in renpy.list_files():
                if file.startswith('images/sprites') and (file.endswith('.png') or file.endswith('.webp')):
                    name = file.replace('images/sprites/','').replace('/', ' ').replace('.png','').replace('.webp','')
                    img_str = 'image ' + name + ' = "' + file + '"'
                    f.write('    # ' + img_str + '\r\n')

            f.write('## BGs:\r\n')
            for file in renpy.list_files():
                if file.startswith('images/BG/') and (file.endswith('.png') or file.endswith('.webp') or file.endswith('.jpg')):
                    name = file.replace('images/BG/','').replace('/', ' ').replace('.png','').replace('.webp','').replace('.jpg','')
                    img_str = 'image ' + name + ' = "' + file + '"'
                    f.write('    # ' + img_str + '\r\n')

            f.write('## CGs:\r\n')
            for file in renpy.list_files():
                if file.startswith('images/CG/') and (file.endswith('.png') or file.endswith('.webp') or file.endswith('.jpg')):
                    name = file.replace('images/CG/','').replace('/', ' ').replace('.png','').replace('.webp','').replace('.jpg','')
                    img_str = 'image ' + name + ' = "' + file + '"'
                    f.write('    # ' + img_str + '\r\n')

            f.write('\r\n## Music:\r\n# init -2 python:\r\n')
            for file in renpy.list_files():
                if file.startswith('audio/music/') and (file.endswith('.ogg') or file.endswith('.wav') or file.endswith('.mp3')):
                    name = file.replace('audio/music/','').replace('/', ' ').replace('.ogg','').replace('.wav','').replace('.mp3','')
                    my_str = name + ' = "' + file + '"'
                    f.write('    # ' + my_str + '\r\n')

            f.write('\r\n## Music Caption:\r\n')
            for file in renpy.list_files():
                if file.startswith('audio/music/') and (file.endswith('.ogg') or file.endswith('.wav') or file.endswith('.mp3')):
                    name = file.replace('audio/music/','').replace('/', ' ').replace('.ogg','').replace('.wav','').replace('.mp3','')
                    my_str = name + ' = "' + file + '"'
                    f.write('    # ' + name + ': _("")' + '\r\n')

            f.write('\r\n## SFX:\r\n')
            for file in renpy.list_files():
                if file.startswith('audio/sfx/') and (file.endswith('.ogg') or file.endswith('.wav') or file.endswith('.mp3')):
                    name = file.replace('audio/sfx/','').replace('/', ' ').replace(' ', '_').replace('.ogg','').replace('.wav','').replace('.mp3','')
                    my_str = name + ' = "' + file + '"'
                    f.write('    # ' + my_str + '\r\n')

            f.write('\r\n## SFX Caption:\r\n')
            for file in renpy.list_files():
                if file.startswith('audio/sfx/') and (file.endswith('.ogg') or file.endswith('.wav') or file.endswith('.mp3')):
                    name = file.replace('audio/sfx/','').replace('/', ' ').replace(' ', '_').replace('.ogg','').replace('.wav','').replace('.mp3','')
                    my_str = name + ' = "' + file + '"'
                    f.write('    # ' + name + ': _("")' + '\r\n')
            f.write('\r\n')
        f.closed

        with open(renpy.loader.transfn('definitions.rpy'), 'ab') as f:
            f.write(s)
        f.closed

